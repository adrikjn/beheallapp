import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import AccordionNav from "../components/AccordionNav";
import Account from "../components/Account";

export const Dashboard = () => {
  const token = localStorage.getItem("Token");
  const navigate = useNavigate();
  const [userData, setUserData] = useState(null);
  const [userCompanyId, setUserCompanyId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      if (!token) {
        navigate("/login");
        return;
      }

      // Récupérer les données UserData depuis le localStorage
      const storedUserData = JSON.parse(localStorage.getItem("UserData"));
      setUserData(storedUserData);

      if (storedUserData) {
        // Récupérer l'ID de l'utilisateur
        const userId = storedUserData.id;

        // Définir l'en-tête Authorization avec le Bearer Token
        const headers = {
          Authorization: `Bearer ${token}`,
        };

        try {
          // Appeler l'API pour obtenir les entreprises avec l'en-tête
          const response = await fetch("http://localhost:8000/api/companies", {
            headers,
          });
          const data = await response.json();

          // Trouver l'entreprise qui correspond à l'utilisateur
          const matchingCompany = data.find(
            (company) => company.user.id === userId
          );

          if (matchingCompany) {
            setUserCompanyId(matchingCompany.id);
          }
        } catch (error) {
          console.error("Error fetching companies:", error);
        }
      }
    };

    fetchData();
  }, [token, navigate]);

  return (
    <div className="dashboard-page">
      {userData && (
        <div className="welcome-user">
          <h1>Welcome, {userData.firstName}</h1>
          <Account />
        </div>
      )}
      {userCompanyId && (
        <div>
          <div className="invoice-title">
            <p>Factures envoyées</p>
            <p>Statut</p>
          </div>
          {userData &&
            userData.companies &&
            userData.companies.map((company) => {
              if (company.id === userCompanyId) {
                return company.invoices.map((invoice) => (
                  <div key={invoice.id} className="invoice-list">
                    <div className="invoice-customers">
                      <p>{invoice.customer.companyName}</p>
                      <p>{invoice.status}</p>
                    </div>
                    <div className="line"></div>
                  </div>
                ));
              }
              return null;
            })}
        </div>
      )}

      <div className="revenue-party">
        <h2>Evolution du CA</h2>
        <div className="revenue">
          <div className="revenue-title-date">
            <p>ca :</p>
            <p>
              Juin <span>2023</span>
            </p>
          </div>
          <p className="revenue-amount">123.34 €</p>
          <p className="revenue-evolution">+67%</p>
          <div className="view-more-revenue">
            <img src="/arrow.svg" alt="facture" />
            <Link to="/dashboard" className="link-see-more">
              Voir plus
            </Link>
          </div>
        </div>
      </div>
      <div className="btn-invoice">
        <Link to="/invoice-step-one">
          <button>Créer une facture</button>
        </Link>
      </div>
      <AccordionNav />
    </div>
  );
};

// Get UserData sur l'id, ça va donné la/les companies
// Get de cette/ces companies
// sérialiser company:read sur Invoice pour récupérer les informations
